load "PETSc"
macro dimension()3// EOM
include "macro_ddm.idp"
load "iovtk"

string meshFileName = "mesh/bend_pipe_3d_coarse.mesh";
string outputFileName = "output/output-3d";

bool solveDiffusion = true;

int Wall = 1;
int Inlet = 3;
int Outlet = 2;
int InnerWall = 4;

real uin = 0.5;
func fx = 0;
func fy = 0;
func fz = 0;

real rho = 500.;
real mu = 0.1;

real Dc = 0.005;
real cBC = 0.1;

real dt = 0.1;
real T = 200;
int saveEach = 0.5/dt;;
int[int] orderOut = [1, 1, 1, 1, 1];
bool saveSingleBlock = false;

macro div(u) (dx(u#x) + dy(u#y) + dz(u#z))//
macro grad(u) [dx(u), dy(u), dz(u)]//
macro Grad(u) [grad(u#x), grad(u#y), grad(u#z)]//

mesh3 Mesh = readmesh3(meshFileName);
mesh3 MeshBackup = Mesh;

if (mpirank == 0)
  cout << "Number of Elements: " + Mesh.nt << endl;

func PkVector = [P2, P2, P2, P1];
func Pk = P1;

int[int] n2oGlobal;
NewMacro MeshN2O() n2oGlobal EndMacro
Mat NS, A;
buildDmesh(Mesh);
{
  macro def(i)[i, i#B, i#C, i#D]//
  macro init(i)[i, i, i, i]//
  createMat(Mesh, NS, PkVector)
}
{
  macro def(i)i//
  macro init(i)i//
  createMat(Mesh, A, Pk)
}

fespace SpaceP1(Mesh, Pk);
SpaceP1 c, cold;

fespace SpaceVector(Mesh, PkVector);
SpaceVector [ux, uy, uz, p];
SpaceVector [upx, upy, upz, pp];

if (mpirank == 0)
  cout << "Finite Element DOF (in each partition): " + SpaceVector.ndof << endl;

varf diffuse(c, v) =
    int3d(Mesh)(c/dt*v)
    + int3d(Mesh)(Dc*(grad(c)' * grad(v)))
    // + int3d(Mesh)(cold/dt*v)
    // + int3d(Mesh)((ux*dx(c) + uy*dy(c) + uz*dz(c))*v)
    + int3d(Mesh)(convect([upx, upy, upz], -dt, cold)*v/dt)
    + on(InnerWall, c=cBC)
;

varf navierstokes([ux, uy, uz, p], [uhx, uhy, uhz, ph])
  = int3d(Mesh)(rho/dt* [ux, uy, uz]'* [uhx, uhy, uhz])
  + int3d(Mesh)(
    + mu* (Grad(u):Grad(uh))
    - p* div(uh)
    - ph* div(u)
    - 1e-10 *p*ph
    )
  + int3d(Mesh) (
      [fx, fy, fz]' * [uhx, uhy, uhz]
    + rho/dt* [convect([upx, upy, upz], -dt, upx), convect([upx, upy, upz], -dt, upy),
               convect([upx, upy, upz], -dt, upz)]'* [uhx, uhy, uhz]
    )
  + on(Wall, InnerWall, ux=0, uy=0, uz=0)
  + on(Inlet, ux=uin, uy=0, uz=0)
  // + on(Outlet, p=0)
;

[ux, uy, uz, p]=[1.0, 1.0, 1.0, 2.0];
[upx, upy, upz, pp]=[0, 0, 0, 0];
c = 0;

NS = navierstokes(SpaceVector, SpaceVector, tgv=-1);
real[int] NSrhs(SpaceVector.ndof);
A = diffuse(SpaceP1, SpaceP1);
real[int] rhs(SpaceP1.ndof);

string[int] names(2);
names[0] = "velocity";
names[1] = "pressure";
set(A, sparams = "-pc_type hypre -ksp_monitor");
set(NS, sparams = "-ksp_monitor -ksp_type fgmres -ksp_converged_reason -pc_type fieldsplit -pc_fieldsplit_type schur "
                + "-fieldsplit_velocity_pc_type gamg -fieldsplit_pressure_ksp_max_it 5 "
                + "-fieldsplit_pressure_pc_type jacobi -fieldsplit_velocity_ksp_type preonly -pc_fieldsplit_schur_fact_type full",
                fields = ux[], names = names);

for(int i = 0; i < T/dt; i++)
{
  if(mpirank == 0)
    cout << "iteration: " << i << endl;

  if (i)
    [upx, upy, upz, pp] = [ux, uy, uz, p];
  cold = c;

  if (solveDiffusion)
  {
    rhs  = diffuse(0, SpaceP1);
    c[] = A^-1 * rhs;
  }

  NSrhs = navierstokes(0, SpaceVector, tgv=-1);
  ux[] = 0;
  ux[] = NS^-1 * NSrhs;

  if (i % saveEach == 0)
  {
    if(mpirank == 0)
      cout << "saving output..." << endl;
    if (saveSingleBlock)
    {
      fespace SpaceBackup(MeshBackup, Pk);
      SpaceBackup cG, cReduce;

      SpaceP1 cTemp = c;
      cTemp[] .*= A.D;

      int[int] rst = restrict(SpaceP1, SpaceBackup, n2oGlobal);

      cG = 0;
      for[i, v : rst] cG[][v] = cTemp[][i];

      cReduce = 0;
      mpiAllReduce(cG[], cReduce[], mpiCommWorld, mpiSUM);

      if (mpirank == 0)
        savevtk(outputFileName + "-" + i + ".vtu", MeshBackup, cReduce, dataname="c", order=orderOut);
    }
    else
      savevtk(outputFileName + ".vtu", Mesh, c, ux, uy, uz, p, dataname="c u v w p", order=orderOut,
              append = i ? true : false);
  }
}
